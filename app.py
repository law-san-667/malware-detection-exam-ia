import os

import joblib
import pandas as pd
import pefile
from flask import Flask, render_template, request
from werkzeug.utils import secure_filename

app = Flask(__name__)

# Chargement du modèle
model = joblib.load("randomForestClassifier_model.pkl")

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/predict', methods=['POST'])
def predict():
    if request.method == 'POST':
        try:
            # Récupération du fichier envoyé via le formulaire
            file = request.files['file']
            filename = secure_filename(file.filename)
            # Extraction des caractéristiques du fichier
            features = extract_features_from_exe(file)
            # Préparation des données pour la prédiction
            data = pd.DataFrame([features])
            # Prédiction
            prediction = model.predict(data)[0]  # Assurez-vous que 'model' est un objet modèle correctement chargé
            # Résultat
            result = "Malveillant" if prediction == 1 else "Légitime"
            # Couleur du texte
            text_color = "red" if prediction == 1 else "green"
            return render_template('index.html', filename=filename, result=result, text_color=text_color)
        except Exception as e:
            return render_template('index.html', error="Impossible de traiter ce fichier")

def extract_features_from_exe(file):
    # Créer une instance PE (Portable Executable) pour analyser le fichier EXE
    pe = pefile.PE(data=file.read())

    # Extraire les caractéristiques pertinentes
    address_of_entry_point = pe.OPTIONAL_HEADER.AddressOfEntryPoint
    major_linker_version = pe.OPTIONAL_HEADER.MajorLinkerVersion
    major_image_version = pe.OPTIONAL_HEADER.MajorImageVersion
    major_os_version = pe.OPTIONAL_HEADER.MajorOperatingSystemVersion
    dll_characteristics = pe.OPTIONAL_HEADER.DllCharacteristics
    size_of_stack_reserve = pe.OPTIONAL_HEADER.SizeOfStackReserve
    number_of_sections = len(pe.sections)
    resource_size = sum(section.SizeOfRawData for section in pe.sections if section.SizeOfRawData)

    # Retourner les caractéristiques extraites
    return {
        'AddressOfEntryPoint': address_of_entry_point,
        'MajorLinkerVersion': major_linker_version,
        'MajorImageVersion': major_image_version,
        'MajorOperatingSystemVersion': major_os_version,
        'DllCharacteristics': dll_characteristics,
        'SizeOfStackReserve': size_of_stack_reserve,
        'NumberOfSections': number_of_sections,
        'ResourceSize': resource_size
    }

if __name__ == '__main__':
    app.run(debug=True)
